Index: asterisk-1.8.7.0/cel/cel_dbg.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ asterisk-1.8.7.0/cel/cel_dbg.c	2011-11-22 14:35:17.293264747 -0500
@@ -0,0 +1,93 @@
+#include "asterisk.h"
+
+#include "asterisk/cel.h"
+#include "asterisk/cli.h"
+#include "asterisk/lock.h"
+#include "asterisk/logger.h"
+#include "asterisk/module.h"
+
+static struct ast_event_sub *event_sub = NULL;
+
+AST_MUTEX_DEFINE_STATIC(lock);
+
+static unsigned int cel_event_count = 0;
+static struct timeval cel_last_event_time;
+
+static void dbg_log(const struct ast_event *event, void *userdata)
+{
+	struct ast_cel_event_record record = {
+		.version = AST_CEL_EVENT_RECORD_VERSION,
+	};
+
+	if (ast_cel_fill_record(event, &record)) {
+		ast_log(LOG_WARNING, "ast_cel_fill_record returned non-zero\n");
+	}
+	else {
+		ast_mutex_lock(&lock);
+		cel_event_count++;
+		cel_last_event_time = record.event_time;
+		ast_mutex_unlock(&lock);
+
+		ast_log(LOG_NOTICE, "CEL event: %s, exten %s, context %s, uid %s\n",
+				record.event_name, record.extension, record.context,
+				record.unique_id);
+	}
+}
+
+static char *cel_dbg_show(struct ast_cli_entry *e, int cmd, struct ast_cli_args *a)
+{
+	struct ast_tm timeresult;
+	char event_time[80] = "";
+
+	switch (cmd) {
+	case CLI_INIT:
+		e->command = "cel dbg show";
+		e->usage =
+			"Usage: cel dbg show\n"
+			"       Print CEL debugging information.\n";
+		return NULL;
+	case CLI_GENERATE:
+		return NULL;
+	}
+
+	ast_mutex_lock(&lock);
+	ast_cli(a->fd, "CEL events: %d\n", cel_event_count);
+	if (cel_event_count) {
+		ast_localtime(&cel_last_event_time, &timeresult, NULL);
+		ast_strftime(event_time, sizeof(event_time), "%Y-%m-%d %T", &timeresult);
+		ast_cli(a->fd, "CEL last event time: %s\n", event_time);
+	}
+	ast_mutex_unlock(&lock);
+
+	return CLI_SUCCESS;
+}
+
+static struct ast_cli_entry cli_cel_dbg[] = {
+	AST_CLI_DEFINE(cel_dbg_show, "Print CEL debugging information."),
+};
+
+static enum ast_module_load_result load_module(void)
+{
+	event_sub = ast_event_subscribe(AST_EVENT_CEL, dbg_log, "CEL Debugging",
+		NULL, AST_EVENT_IE_END);
+
+	ast_cli_register_multiple(cli_cel_dbg, ARRAY_LEN(cli_cel_dbg));
+
+	return AST_MODULE_LOAD_SUCCESS;
+}
+
+static int unload_module(void)
+{
+	ast_cli_unregister_multiple(cli_cel_dbg, ARRAY_LEN(cli_cel_dbg));
+
+	event_sub = ast_event_unsubscribe(event_sub);
+
+	return 0;
+}
+
+AST_MODULE_INFO(ASTERISK_GPL_KEY, AST_MODFLAG_LOAD_ORDER, "Debugging CEL Backend",
+	.load = load_module,
+	.unload = unload_module,
+	.load_pri = AST_MODPRI_CDR_DRIVER,
+	);
+
