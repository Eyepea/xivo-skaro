#!/bin/bash

# For now, this script allows to detect non-translated strings.
# But it detects a LOT of false positive (translated strings that are not in a
# dedicated file).

# Launch it in web_interface.
# Entry point is print_not_translated, but each little function could be reused
# later

# Ideas :
# - detect not translated strings
# - detect obsolete translations (translations not used)
# - detect differences between translations
# - move translations from one file to another
# - detect loop of i18n inclusion

tpl_regexp="bbf('\([^']*\)')"

# Make one translation per line
function tpl_split_lines {
    sed "s/$tpl_regexp/&\n/g" -
}

# Only the lines containing a translation
function tpl_filter_lines {
    grep "$tpl_regexp" -
}

# Only the translation of a line
function tpl_clean_string_ids {
    sed "s/.*$tpl_regexp.*/\1/" -
}

# String ids of files
function tpl_extract_string_ids {
    if [ ! -r "$1" ] ; then
        return
    fi
    cat "$@" | tpl_split_lines | tpl_filter_lines | tpl_clean_string_ids | sort -u
}

i18n_path=i18n

function linked_i18n_file {
    # $1 is the language
    # $2 is the php file
    echo "$i18n_path/$1"/$(sed 's/php$/i18n/' <<< "$2")
}

function linked_i18n_dir {
    # $1 is the language
    # $2 is the php file
    linked_i18n_file "$@" | sed 's/[^\/]*\.i18n$//'
}

i18n_regexp="^; \([^ ]*\) *$"

function i18n_filter_lines {
    grep "$i18n_regexp" - | grep -v "^; load .*$"
}

function i18n_clean_string_ids {
    sed "s/$i18n_regexp/\1/" -
}

function i18n_extract_string_ids {
    if [ ! -r "$1" ] ; then
        return
    fi
    cat "$@" | i18n_filter_lines | i18n_clean_string_ids | sort -u
}

# Print the lines of the first arg minus the lines of the second
function difference {
    # <(command) creates a named pipe containing the output of the command
    comm -23 <(echo "$1") <(echo "$2")
}

languages=$(find "$i18n_path" -maxdepth 1 -mindepth 1 -type d -printf '%f\n')

i18n_global_files=\
"tpl/tpl.i18n
conf/acl.i18n
conf/user.i18n
util/date.i18n
util/size.i18n
xivo.i18n"

declare -A i18n_global_string_ids

for language in $languages ; do
    i18n_global_string_ids["$language"]=""
    for global_file in $i18n_global_files ; do
        i18n_global_string_ids["$language"]=$(sort -m \
            <(echo "${i18n_global_string_ids[$language]}") \
            <(i18n_extract_string_ids "$i18n_path/$language/$global_file"))
    done
done

function not_translated {
    tpl_string_ids=$(tpl_extract_string_ids "$1")
    if [ -z "$tpl_string_ids" ] ; then
        return
    fi
    for language in $languages ; do
        # Search in the entire directory to have less false positive
        i18n_name=$(linked_i18n_dir "$language" "$1")
        i18n_string_ids=$(sort -m \
            <(echo "${i18n_global_string_ids[$language]}") \
            <(i18n_extract_string_ids "$i18n_name/"*".i18n") \
            <(i18n_extract_string_ids $(dirname "$i18n_name")"/"*".i18n"))
        difference "$tpl_string_ids" "$i18n_string_ids" | sed "s/^/$language:/"
    done
}

# Main entry point
function print_not_translated {
    tpl_files=$(find tpl -type f -name '*.php')
    tpl_nb_files=$(wc -l <<< "$tpl_files")
    counter=0
    for tpl_file in $tpl_files ; do
        counter=$(($counter + 1))
        header=$(echo "$counter/$tpl_nb_files $tpl_file")
        content=$(not_translated "$tpl_file")
        if [ ! -z "$content" ] ; then
            echo "$header"
            echo "$content"
        fi
    done
}

#print_not_translated

# Find strings translated in french but not in english
function french_not_english {
    fr_files=$(find i18n/fr_FR -type f -name '*.i18n')
    for fr_file in $fr_files ; do
        en_file=$(sed 's/fr_FR/en_US/' <<< "$fr_file")
        difference "$(i18n_extract_string_ids $fr_file)" "$(i18n_extract_string_ids $en_file)" \
            | sed "s|^|$en_file : |"
    done
}
french_not_english