#!/usr/bin/python
# -*- coding: UTF-8 -*-

import argparse
import errno
import logging
import os.path
import subprocess

logger = logging.getLogger('xivo-berofos')


def main():
    try:
        _do_main()
    except Exception:
        raise SystemExit(1)


def _do_main():
    parsed_args = _parse_args()
    _init_logging(parsed_args)
    if is_berofos_configured():
        if parsed_args.ha_state == 'master':
            set_berofos_relay_mode(1)
        elif parsed_args.ha_state == 'slave':
            set_berofos_relay_mode(0)
        else:
            logger.error('unknown ha state: %r', parsed_args.ha_state)
            raise ValueError(parsed_args.ha_state)
    else:
        logger.info('berofos is not configured -- doing nothing')


def _parse_args():
    parser = _new_argument_parser()
    return parser.parse_args()


def _new_argument_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
                        help='increase logging verbosity')
    parser.add_argument('--syslog', action='store_true', default=False,
                        help='also log to syslog')
    parser.add_argument('ha_state', choices=['master', 'slave'],
                        help='the target state of the HA')
    return parser


def _init_logging(parsed_args):
    logger = logging.getLogger()
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter('%(message)s'))
    logger.addHandler(handler)
    if parsed_args.syslog:
        from logging.handlers import SysLogHandler
        handler = SysLogHandler('/dev/log', SysLogHandler.LOG_USER)
        handler.setFormatter(logging.Formatter('xivo-berofos[%(process)d]: %(message)s'))
        logger.addHandler(handler)
    if parsed_args.verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)


def is_berofos_configured():
    return os.path.exists('/etc/bnfos.conf')


_RELAY_MODE = {0: 'A--D', 1: 'A--B'}

def set_berofos_relay_mode(mode):
    logger.info('setting berofos relay mode to %r (%s)',
                mode, _RELAY_MODE.get(mode, 'unknown'))
    bnfos_command = ['--set', 'mode=%s' % mode, '-f', 'fos1']
    _exec_bnfos_command(bnfos_command)


def _exec_bnfos_command(bnfos_command):
    command = ['bnfos'] + bnfos_command
    logger.debug('Executing %r', command)
    try:
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        output = process.communicate()[0]
    except OSError as e:
        if e.errno == errno.ENOENT:
            logger.error('error while executing bnfos command: bnfos command not found')
        raise
    else:
        if process.returncode:
            logger.error('error while executing bnfos command: return code %r', process.returncode)
            logger.info('%s', output)
            raise Exception('bnfos command returned %r' % process.returncode)


if __name__ == '__main__':
    main()
