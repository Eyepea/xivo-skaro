#!/usr/bin/python
# -*- coding: UTF-8 -*-

import argparse
import logging
import os.path
import subprocess

logger = logging.getLogger('xivo-berofos')


def main():
    parsed_args = _parse_args()
    _init_logging(parsed_args)
    if is_berofos_configured():
        if parsed_args.ha_state == 'master':
            set_berofos_relay_mode(1)
        elif parsed_args.ha_state == 'slave':
            set_berofos_relay_mode(0)
        else:
            logger.error('unknown ha state: %r', parsed_args.ha_state)
            raise ValueError(parsed_args.ha_state)
    else:
        logger.info('berofos is not configured -- doing nothing')


def _parse_args():
    parser = _new_argument_parser()
    return parser.parse_args()


def _new_argument_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true', default=False,
                        help='increase logging verbosity')
    parser.add_argument('--syslog', action='store_true', default=False,
                        help='log to syslog instead of stdout')
    parser.add_argument('ha_state', choices=['master', 'slave'],
                        help='the target state of the HA')
    return parser


def _init_logging(parsed_args):
    logger = logging.getLogger()
    if parsed_args.syslog:
        from logging.handlers import SysLogHandler
        handler = SysLogHandler('/dev/log', SysLogHandler.LOG_USER)
        handler.setFormatter(logging.Formatter('xivo-berofos[%(process)d]: %(message)s'))
    else:
        handler = logging.StreamHandler()
        handler.setFormatter(logging.Formatter('%(message)s'))
    logger.addHandler(handler)
    if parsed_args.verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)


def is_berofos_configured():
    return os.path.exists('/etc/bnfos.conf')


def set_berofos_relay_mode(mode):
    logger.info('setting berofos relay mode to %s', mode)
    command = ['bnfos', '--set', 'mode=%s' % mode, '-f', 'fos1']
    logger.debug('Executing %r', command)
    subprocess.check_call(command)


if __name__ == '__main__':
    main()
