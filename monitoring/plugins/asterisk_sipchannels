#!/usr/bin/perl -w
#
# Copyright (C) 2005-2006 Rodolphe Quiedeville <rodolphe@quiedeville.org>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
# If you improve this script please send your version to my email address
# with the copyright notice upgrade with your name.
#
# Plugin to monitor number of SIP active channels by codec used, use the 
# asterisk's manager API to fecth datas.
#
# $Log$
# Revision 1.3  2006/02/27 12:04:01  rodo
# Support codec's list definition in config file
#
# Revision 1.2  2006/02/26 12:04:01  rodo
# Support Asterisk 1.2
#
# Revision 1.1  2005/10/28 21:04:01  rodo
# Created by Rodolphe Quiedeville
#
# Parameters mandatory:
#
#     username
#     secret
#
# Optional parameters:
#       codecs
#
#%# family=asterisk
#%# capabilities=autoconf

use strict;

my $ret = undef;
if (! eval "require Net::Telnet;")
{
    $ret = "Net::Telnet not found";
}

# http://www.voip-info.org/wiki/view/Asterisk+codecs
#Codecs g723, gsm, ulaw, alaw, g726, adpcm, slin, lpc10, g729, speex, ilbc, g722

my @CODECS = exists $ENV{'codecs'} ? split ' ',$ENV{'codecs'} : qw(gsm ulaw alaw g729 g722);
my @CODECSX = exists $ENV{'codecsx'} ? split ' ',$ENV{'codecsx'} : qw(0x2 0x4 0x8 0x100 0x1000);

if ($ARGV[0] and $ARGV[0] eq "config")
{
    print "graph_title Asterisk sip channels/codecs\n";
    print "graph_args --base 1000 -l 0\n";
    print "graph_vlabel channels\n";
    print "graph_category asterisk\n";
    foreach my $codec (@CODECS) {
    if ($codec eq $CODECS[0]) {
        print "$codec.draw AREA\n";
    }
    else{
        print "$codec.draw STACK\n";
    }
    print "$codec.label $codec\n";
    }
    print "other.draw STACK\n";
    print "other.label other\n";
    print "unknown.draw STACK\n";
    print "unknown.label not set\n";
    exit 0;
}

my $host = exists $ENV{'host'} ? $ENV{'host'} : "127.0.0.1";
my $port = exists $ENV{'port'} ? $ENV{'port'} : "5038";

my $username = $ENV{'username'};
my $secret   = $ENV{'secret'};

my $pop = new Net::Telnet (Telnetmode => 0);
$pop->open(Host => $host,
       Port => $port);

## Read connection message.
my $line = $pop->getline;
die $line unless $line =~ /^Asterisk/;

## Send user name.
$pop->print("Action: login");
$pop->print("Username: $username");
$pop->print("Secret: $secret");
$pop->print("Events: off");
$pop->print("");

## Request status of messages.
$pop->print("Action: command");
$pop->print("Command: sip show channels");
$pop->print("");

#Response: Follows
#Privilege: Command
#Peer           User/ANR    Call ID      Seq (Tx/Rx)  Format         Hold   Last Message   
#0 active SIP channels
# -- OR --
#74.218.176.166  (None)    c24a5a230c6  00101/278584006  0x0 (nothing) No    Rx: REGISTER   
#74.218.176.166  (None)    508c037f936  00101/07310  0x0 (nothing)    No     Rx: REGISTER   
#2 active SIP channels
#--END COMMAND--


my @results;
my ($i, $start, $unknown, $other, $fields)=(0,0,0,0,0);
foreach my $codec (@CODECS) {
    $results[$i] = 0;
    $i++;
}

while (($line = $pop->getline) and ($line !~ /END COMMAND/o))
{
    $i = 0;
    if ($start) {
        my @fields = (split ' ', $line);
        if ($fields[3] eq '0x0') {
            $unknown += 1;
            next;
        }
        my $found = 0;
        foreach my $codec (@CODECSX) {
            if ($fields[3] eq "$codec") {
                print("in second if inside foreach");
                $results[$i] = $results[$i] + 1;
                $found = 1;
                last;
            }
            $i++;
        }
        if (! $found) {
            $other += 1;
            print STDERR "SIP other format: $fields[3]\n";
        }
    }
    $start = 1 if ($line =~ /Peer/o);
}

$pop->print("Action: logoff");
$pop->print("");

## Exhaust buffer before closing (to avoid polluting Asterisk's logs)
while ($line = $pop->getline) {}

$i = 0;
foreach my $codec (@CODECS) {
    print "$codec.value $results[$i]\n";
    $i++;
}
print "other.value $other\n";
print "unknown.value $unknown\n";

# vim:syntax=perl
