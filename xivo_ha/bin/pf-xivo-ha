#!/usr/bin/env python

import os
import socket
from configobj import ConfigObj
import sys
from optparse import OptionParser
from xivo_ha.manage_nodes import ClusterEngine
from xivo_ha.manage_nodes import ManageService
from xivo_ha.manage_nodes import FilesReplicationManagement
from xivo_ha.manage_cluster import ClusterResourceManager
from xivo_ha.manage_cluster import DatabaseManagement
from xivo_ha.tools import Tools

# from http://stackoverflow.com/questions/319279/how-to-validate-ip-address-in-python
def is_valid_ipv4_address(address):
    '''check if ip address is valid'''
    try:
        addr= socket.inet_pton(socket.AF_INET, address)
    except AttributeError: 
        try:
            addr= socket.inet_aton(address)
        except socket.error:
            return False
        return address.count('.') == 3
    except socket.error: # not a valid address
        return False
    return True


if __name__ == '__main__':

    parser = OptionParser()
    parser.add_option("--node", dest="node", type='string', metavar="ACTION",
            help="configure node, must be used executed on each node ex : pf-xivo-ha --node init")
    parser.add_option("--cluster", dest="cluster", type='string', metavar="ACTION",
            help="configure the cluster resource manager (init or status)")
    parser.add_option("--config_file", dest="config_file", type='string', metavar="CONFIG_FILE",
            help="specify the config file to use (default : /etc/pf-xivo/xivo_ha/pf-xivo-ha.conf)")
    (options, args) = parser.parse_args()


    if options.config_file is None:
        config_file = '/etc/pf-xivo/xivo_ha/pf-xivo-ha.conf'
    else:
        config_file = options.config_file

    config = ConfigObj(config_file)

    # check if one option is given
    if not options.node and not options.cluster and not options.csync:
        parser.error("option --cluster or --node is mandatory")

    # corosync data
    nodes_config   = config['nodes']
    network_addr   = nodes_config['network_addr']
    multicast_addr = nodes_config['multicast_addr']
    services       = config['cluster']['services'].keys()

    nodes = [
             nodes_config['first_node']['name'],
             nodes_config['second_node']['name']
            ]
    # cluster data
    cluster_config = config['cluster']
    cluster_config['cluster_nodes'] = nodes 

    node_management  = ClusterEngine(network_addr, multicast_addr)
    cluster = ClusterResourceManager(cluster_config)

    # csync2 configuration.
    csync_data  = cluster_config['csync2']
    csync_data['hosts'] = nodes
    csync2 = FilesReplicationManagement(csync_data)


    for address in network_addr, multicast_addr:
        is_valid_ipv4_address(address)

    if options.node:
        if options.node == 'init':
            node_management.initialize()
            for service in services:
                manage_service = ManageService(service)
                manage_service.initialize()
            csync2.initialize()
            sys.stdout.write("You have to copy /etc/pf-xivo/xivo-ha/pf-xivo-ha.conf to the other node\n")
            sys.stdout.write("You have to do the same action on the other node to finish node configuration\n")
        else:
            parser.error("this option is not allowed")

    if options.cluster:
        if options.cluster == 'init':
            cluster.manage() 
        elif options.cluster == 'status':
            cluster.status()
        else:
            parser.error("this option is not allowed")
