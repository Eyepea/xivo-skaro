#!/usr/bin/env python

import os
import socket
from configobj import ConfigObj
import sys
from optparse import OptionParser
from xivo_ha.manage_nodes import ClusterEngine
from xivo_ha.manage_nodes import ManageService
from xivo_ha.manage_cluster import ClusterResourceManager
from xivo_ha.manage_cluster import DatabaseManagement

# from http://stackoverflow.com/questions/319279/how-to-validate-ip-address-in-python
def is_valid_ipv4_address(address):
    '''check if ip address is valid'''
    try:
        addr= socket.inet_pton(socket.AF_INET, address)
    except AttributeError: 
        try:
            addr= socket.inet_aton(address)
        except socket.error:
            return False
        return address.count('.') == 3
    except socket.error: # not a valid address
        return False
    return True


if __name__ == '__main__':

    parser = OptionParser()
    parser.add_option("-n", "--node", dest="node", type='string', metavar="ACTION",
            help="configure node, must be used executed on each node (init or update)")
    parser.add_option("-c", "--cluster", dest="cluster", type='string', metavar="ACTION",
            help="configure the cluster resource manager (init or update)")
    parser.add_option("-f", "--config_file", dest="config_file", type='string', metavar="CONFIG_FILE",
            help="specify the config file to use (default : /etc/pf-xivo/xivo_ha/pf-xivo-ha.conf)")
    (options, args) = parser.parse_args()


    if options.config_file is None:
        config_file = '/etc/pf-xivo/xivo_ha/pf-xivo-ha.conf'
    else:
        config_file = options.config_file

    config = ConfigObj(config_file)

    # check if there is only one options
    if options.node and options.cluster:
        parser.error("option -n and -c mutually exclusive")

    # check if one option is given
    if not options.node and not options.cluster:
        parser.error("option -n or -c is mandatory")

    
    nodes_config   = config['nodes']
    cluster_config = config['cluster']

    # corosync data
    network_addr   = nodes_config['network_addr']
    multicast_addr = nodes_config['multicast_addr']

    node_management  = ClusterEngine(network_addr, multicast_addr)
    cluster = ClusterResourceManager(cluster_config)



    for address in network_addr, multicast_addr:
        is_valid_ipv4_address(address)

    if options.node:
        if options.node == "init":
            node_management.initialize()
            for service in services:
                manage_service = ManageService(service)
                manage_service.initialize()
        elif options.node == "update":
            pass
        else:
            parser.error("this option is not allowed")

    if options.cluster:
        if options.cluster == "init":
            cluster.manage() 
            
        elif options.cluster == "update":
            pass
        else:
            parser.error("this option is not allowed")
