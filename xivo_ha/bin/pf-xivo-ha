#!/usr/bin/env python

import os
import socket
import sys
import pprint
from configobj import ConfigObj
from optparse import OptionParser
from xivo_ha.manage_nodes import ClusterEngine
from xivo_ha.manage_nodes import ManageService
from xivo_ha.manage_nodes import FilesReplicationManagement
from xivo_ha.manage_cluster import ClusterResourceManager
from xivo_ha.manage_cluster import DatabaseManagement
from xivo_ha.tools import Tools

# from http://stackoverflow.com/questions/319279/how-to-validate-ip-address-in-python
def is_valid_ipv4_address(address):
    '''check if ip address is valid'''
    try:
        addr= socket.inet_pton(socket.AF_INET, address)
    except AttributeError: 
        try:
            addr= socket.inet_aton(address)
        except socket.error:
            return False
        return address.count('.') == 3
    except socket.error: # not a valid address
        return False
    return True


if __name__ == '__main__':

    parser = OptionParser()
    parser.add_option('--node', dest='node', type='string', metavar='ACTION',
            help='configure node, must be used executed on each node (init or update)\n'
                 'you must specify --role and --hostname')
    parser.add_option('--cluster', dest='cluster', type='string', metavar='ACTION',
            help='configure the cluster resource manager (manage or status)')
    parser.add_option('-r', '--role', dest='role', type='string', metavar='ROLE',
            help='specify role (master or slave)')
    parser.add_option('-n', '--hostname', dest='host', type='string', metavar='HOSTNAME',
            help='specify hostname')
    parser.add_option('-f', '--config_file', dest='config_file', type='string', metavar='CONFIG_FILE',
            help='specify the config file to use (default : /etc/pf-xivo/xivo_ha/pf-xivo-ha.conf)')
    (options, args) = parser.parse_args()


    if options.config_file is None:
        config_file = '/etc/pf-xivo/xivo_ha/pf-xivo-ha.conf'
    else:
        config_file = options.config_file

    config = ConfigObj(config_file)

    # check if one option is given
    if not options.node and not options.cluster:
        parser.error("option --cluster or --node is mandatory")

    if options.node:
        if not options.role or not options.host:
            parser.error("You have to specify role and hostname")

    extra = "/etc/pf-xivo/xivo_ha/pf-xivo-ha-extra.conf"
    def _get_extra_services():
        for l in open(extra):
            data = l.replace(' ', '').strip()
            data = data.split("=")
            if data[0] == 'services' and data[1] is not '':
                services = data[1].split(',')
                return services

    def _get_extra_scripts():
        for l in open(extra):
            data = l.replace(' ', '').strip()
            data = data.split("=")
            if data[0] == 'scripts' and data[1] is not '':
                scripts = data[1].split(',')
                cluster_config['scripts'] = scripts
                return True


    def _check_if_service_exist(service):
        file_ = "/etc/init.d/%s" % service
        if not os.path.isfile(file_):
            warn = "init file %s does not exist" % file_
            raise IOError(warn)

    def _get_extra_csync_data():
        for l in open(extra):
            data = l.replace(' ', '').strip()
            data = data.split("=")
            if data[0] == 'extra_include' and data[1] is not '':
                data = data[1].split(',')
                csync_data['extra_include'] = data
            if data[0] == 'extra_exclude' and data[1] is not '':
                data = data[1].split(',')
                csync_data['extra_exclude'] = data


    # corosync data
    nodes_config   = config['nodes']
    network_addr   = nodes_config['network_addr']
    multicast_addr = nodes_config['multicast_addr']
    services       = config['cluster']['services'].keys()

    nodes = [
             nodes_config['first_node']['name'],
             nodes_config['second_node']['name']
            ]
    # cluster data
    cluster_config = config['cluster']
    cluster_config['cluster_nodes'] = nodes 

    extra_services = _get_extra_services() 
    extra_scripts  = _get_extra_scripts()
    if extra_services is not None:
        # node data
        services = services + extra_services
        # cluster data
        for service in extra_services:
            _check_if_service_exist(service)
            cluster_config['services'][service] = {}

    node_management  = ClusterEngine(network_addr, multicast_addr)
    cluster = ClusterResourceManager(cluster_config)

    # csync2 configuration.
    csync_data = {}
    csync_data['hosts'] = nodes
    _get_extra_csync_data()
    csync2 = FilesReplicationManagement(csync_data)
    print(csync_data)

    for address in network_addr, multicast_addr:
        is_valid_ipv4_address(address)

    if options.node:
        if options.node == 'init':
            print('node initialization')
            node_management.initialize()
            for service in services:
                manage_service = ManageService(service)
                manage_service.initialize()
            csync2.initialize()
            if options.role == 'master':
                print('start lighttpd on %s' % options.host)
        elif options.node == 'update':
            print('updating node configuration')
        elif options.node == 'deploy':
            print('deploy config file')
        else:
            parser.error("this option is not allowed")

    if options.cluster:
        if options.cluster == 'manage':
            cluster.manage() 
        elif options.cluster == 'status':
            cluster.status()
        else:
            parser.error("this option is not allowed")
